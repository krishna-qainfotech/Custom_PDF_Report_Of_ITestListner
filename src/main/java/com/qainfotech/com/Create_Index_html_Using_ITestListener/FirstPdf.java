package com.qainfotech.com.Create_Index_html_Using_ITestListener;

import java.io.FileOutputStream;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.http.message.TokenParser;
import org.testng.ITestContext;
import org.testng.ITestResult;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import net.bytebuddy.implementation.attribute.AnnotationAppender.Target.OnType;


public class FirstPdf  {
		
	private static String FILE = "c:/temp/FirstPdf.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
            Font.BOLD);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
            Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
            Font.BOLD);
   static Interface1 interface1;
  
 
    public static void main1(String[] krishna, ITestResult result, ITestContext context) {
    	

   	 long millis = 10000;
		System.out.println(String.format("%02d:%02d:%02d", 
	    		  TimeUnit.MILLISECONDS.toHours(millis),
	    		  TimeUnit.MILLISECONDS.toMinutes(millis) -  
	    		  TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)), // The change is in this line
	    		  TimeUnit.MILLISECONDS.toSeconds(millis) - 
	    		  TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))));  
	  
    	Report report;
        try {
        	
        	 String FilePath = System.getProperty("user.dir");
        		String FileName = "Krishna.pdf";
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(FilePath+"///"+FileName));
            document.open();
            addMetaData(document);
            addTitlePage(document);
            addContent(document, result, context);
            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // iText allows to add metadata to the PDF which can be viewed in your Adobe
    // Reader
    // under File -> Properties
    private static void addMetaData(Document document) {
        document.addTitle("My first PDF");
        document.addSubject("Using iText");
        document.addKeywords("Java, PDF, iText");
        document.addAuthor("Krishna Chauhan(kp)");
        document.addCreator("Krishna Chauhan(kp)");
    }

    private static void addTitlePage(Document document)
            throws DocumentException {
        Paragraph preface = new Paragraph();
        // We add one empty line
        addEmptyLine(preface, 1);
        // Lets write a big header
        preface.add(new Paragraph("Title of the document", catFont));

        addEmptyLine(preface, 1);
        // Will create: Report generated by: _name, _date
        preface.add(new Paragraph(
                "Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                smallBold));
        addEmptyLine(preface, 3);
        preface.add(new Paragraph(
                "This document describes something which is very important ",
                smallBold));

        addEmptyLine(preface, 8);

        preface.add(new Paragraph(
                "This is a pdf file is a custom report which is made by krishna chauhan",
                redFont));

        document.add(preface);
        // Start a new page
        document.newPage();
    }

    private static void addContent(Document document, ITestResult result,ITestContext context) throws DocumentException {
        Anchor anchor = new Anchor("Test Result", catFont);
        anchor.setName("All suites");

        // Second parameter is the number of the chapter
        Chapter catPart = new Chapter(new Paragraph(anchor), 1);

        Paragraph subPara = new Paragraph("Default suit                   ", subFont);
        Section subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("                            Info                   "));
        Section subsubCatPart = subCatPart.addSection("testng-customSuitxml");
        subsubCatPart.add(new Paragraph("/tmp/testng-eclipse-741324185/testng-customsuite.xml\n" + 
        		"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + 
        		"<!DOCTYPE suiInterface1te SYSTEM \"http://testng.org/testng-1.0.dtd\">\n" + 
        		"<suite guice-stage=\"DEVELOPMENT\" name=\"Default suite\">\n" + 
        		"  <test thread-count=\"5\" verbose=\"2\" name=\"Default test\">\n" + 
        		"    <classes>\n" + 
        		"      <class name=\"Create_Index_html_Using_ITestListener.Reporter\"/>\n" + 
        		"    </classes>\n" + 
        		"  </test> <!-- Default test -->\n" + 
        		"</suite> <!-- Default suite -->\n" + 
        		"            ",smallBold));
        subPara = new Paragraph("Subcategory 2", subFont);
        Section subsubCatPart1 = subCatPart.addSection("InterfaceClass Methods");
        subCatPart = catPart.addSection(subPara);
        
        subCatPart.add(new Paragraph("onTestStart->"+result.getName()));
        subCatPart.add(new Paragraph("onTestSuccess->testRealReportTwo"));
        subCatPart.add(new Paragraph("Class name->"+result.getClass()));
        //result.getEndMillis()
       
        subCatPart.add(new Paragraph("EndTimein Millis->"+result.getEndMillis()));
        
        subCatPart.add(new Paragraph("getMethod of the test->"+result.getMethod()));
        
        subCatPart.add(new Paragraph("Result TestContext->"+result.getTestContext()));
        
        subCatPart.add(new Paragraph("Result InstanceName->"+result.getInstanceName()));
        
        subCatPart.add(new Paragraph("Result Start millisec->"+result.getStartMillis()));
        
        subCatPart.add(new Paragraph("Result hashCode->"+result.hashCode()));
        
        subCatPart.add(new Paragraph("Result TestClass->"+result.getTestClass()));
        
        subCatPart.add(new Paragraph("Result parameters->"+result.getParameters()));
        
        subCatPart.add(new Paragraph("Test class Methods->"+result.getMethod()));

        subCatPart.add(new Paragraph("onTestFailure->"+result.STARTED));
        
        subCatPart.add(new Paragraph("Result Success->"+result.SUCCESS));
        
        subCatPart.add(new Paragraph("Result Faliure->"+result.FAILURE));
        
        subCatPart.add(new Paragraph("Success percentage->"+result.SUCCESS_PERCENTAGE_FAILURE));
        
        subCatPart.add(new Paragraph("Result Skipped->"+result.SKIP));
        
        subCatPart.add(new Paragraph("context.getname->"+context.getName()));
        
        subCatPart.add(new Paragraph("getAllTestMethods()->"+context.getAllTestMethods()));
        
        subCatPart.add(new Paragraph("CurrentXMLTEST->"+context.getCurrentXmlTest()));
        
        subCatPart.add(new Paragraph("GetSuite->"+context.getSuite()));
        
        subCatPart.add(new Paragraph("GetEndDate->"+context.getEndDate()));
        
        subCatPart.add(new Paragraph("getExcludedGroup->"+context.getExcludedGroups()));
        
        subCatPart.add(new Paragraph("Get Failed Test->"+context.getFailedTests()));
        
        subCatPart.add(new Paragraph("GetIncluded Group->"+context.getIncludedGroups()));
        
        subCatPart.add(new Paragraph("get Skipped configration->"+context.getSkippedConfigurations()));
        
        subCatPart.add(new Paragraph("Context get start date->"+context.getStartDate()));
        long ltime=result.getEndMillis()-result.getStartMillis();
       System.out.println("HelloTime1"+ltime);
        int time=(int)ltime;
       System.out.println("HelloTime"+time);
   
        subCatPart.add(new Paragraph(String.format("%02d:%02d:%02d", 
	    		  TimeUnit.MILLISECONDS.toHours(time),
	    		  TimeUnit.MILLISECONDS.toMinutes(time) -  
	    		  TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(time)), // The change is in this line
	    		  TimeUnit.MILLISECONDS.toSeconds(time) - 
	    		  TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time)))));
        
        subCatPart.add(new Paragraph("Get all skipped test->"+context.getSkippedTests()));
        subCatPart.add(new Paragraph("onTestSkipped->testRealReportThree"));
        subCatPart.add(new Paragraph("onTestFailedButwithSuccessPercentage->->"));
        subCatPart.add(new Paragraph("onstart->testRealReportTwo"));
        subCatPart.add(new Paragraph("Hello"));
        subCatPart.add(new Paragraph("EndOfProgram->Default test"));
        
        // add a list
        createList(subCatPart);
        Paragraph paragraph = new Paragraph();
        addEmptyLine(paragraph, 5);
        subCatPart.add(paragraph);

        // add a table
        createTable(subCatPart);

        // now add all this to the document
        document.add(catPart);

        // Next section
        anchor = new Anchor("Custom", catFont);
        anchor.setName("Test Case");

        // Second parameter is the number of the chapter
        catPart = new Chapter(new Paragraph(anchor), 1);

        subPara = new Paragraph("Subcategory", subFont);
        subCatPart = catPart.addSection(subPara);
        subCatPart.add(new Paragraph("This is a very important message"));

        // now add all this to the document
        document.add(catPart);

    }

    private static void createTable(Section subCatPart)
            throws BadElementException {
        PdfPTable table = new PdfPTable(3);

        // t.setBorderColor(BaseColor.GRAY);
        // t.setPadding(4);
        // t.setSpacing(4);
        // t.setBorderWidth(1);

        PdfPCell c1 = new PdfPCell(new Phrase("Passed Test cases"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Failed Test Cases"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Unstable Test Cases"));
        c1.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(c1);
        table.setHeaderRows(1);

        table.addCell("1.0 PASSED: testRealReportOne");
        table.addCell("1.1 ");
        table.addCell("1.2 ");
        table.addCell("2.1 PASSED: testRealReportTwo");
        table.addCell("2.2");
        table.addCell("2.3");

        subCatPart.add(table);

    }

    private static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    private static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }
}